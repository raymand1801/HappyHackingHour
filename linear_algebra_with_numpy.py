# -*- coding: utf-8 -*-
"""Linear algebra with Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x_CwrD-zGYmAiG3PgSTXC2jaQziBEFUF

$$Manipulating matrices$$
It is straightforward to create a Matrix using Numpy. Let us consider the following as a examples:
$$
A = \begin{pmatrix}
5 & 6 & 2\\
4 & 7 & 19\\
0 & 3 & 12
\end{pmatrix}
$$
\\
$$
B = \begin{pmatrix}
14 & -2 & 12\\
4 & 4 & 5\\
5 & 5 & 1
\end{pmatrix}
$$
"""

import numpy as np

A = np.matrix([[5, 6, 2],
               [4, 7, 19],
               [0, 3, 12]])

A

B = np.matrix([[14, -2, 12],
               [4, 4, 5],
               [5, 5, 1]])

B

"""We can obtain the following straightforwardly:

$5A$; 
$A ^ 3$; 
$A + B$; 
$A - B$; 
$AB$
"""

5 * A

A ** 3

A + B

A - B

A * B

"""Exercise Compute $A ^ 2 - 2 A + 3$ with:
$$A = 
\begin{pmatrix}
1 & -1\\
2 & 1
\end{pmatrix}
$$
"""

A = np.matrix([[ 1, -1],
              [ 2, -1]])

A ** 2 - 2 * A + 3

"""$$Solving Matrix equations$$

We can use Numpy to (efficiently) solve large systems of equations of the form:

$$Ax=b$$
Let us illustrate that with:
$$
A = \begin{pmatrix}
5 & 6 & 2\\
4 & 7 & 19\\
0 & 3 & 12
\end{pmatrix}
$$
\
$$
b = \begin{pmatrix}
-1\\
2\\
1 
\end{pmatrix}
$$
"""

A = np.matrix([[5, 6, 2],
               [4, 7, 19],
               [0, 3, 12]])
b = np.matrix([[-1], [2], [1]])

"""We use the linalg.solve command:"""

x = np.linalg.solve(A, b)
x

"""We can verify our result:"""

A * x

"""Exercise Compute the solutions to the matrix equation $Bx=b$ (using the $B$ defined earlier)."""

x = np.linalg.solve(B, b)
x

"""$$Matrix inversion and determinants$$
\
Computing the inverse of a matrix is straightforward:
"""

Ainv = np.linalg.inv(A)
Ainv

"""We can verify that $A^{-1}A=\mathbb{1}$:"""

A * Ainv

"""The above might not look like the identity matrix but if you look closer you see that the diagonals are all 1 and the off diagonals are a very small number (which from a computer's point of view is 0).

To calculate the determinant:
"""

np.linalg.det(A)

"""Exercise Compute the inverse and determinant of $B$ (defined previously)."""

Binv = np.linalg.inv(B)
Binv

np.linalg.det(B)